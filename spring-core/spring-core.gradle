import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
	id "com.github.johnrengelman.shadow" version "5.2.0"
}

description = "Spring Core"

apply plugin: "kotlin"

// spring-core includes asm and repackages cglib, inlining both into the spring-core jar.
// cglib itself depends on asm and is therefore further transformed by the JarJar task to
// depend on org.springframework.asm; this avoids including two different copies of asm.
def cglibVersion = "3.3.0"
def objenesisVersion = "3.1"

configurations {
	cglib
	objenesis
	coroutines
}

task cglibRepackJar(type: ShadowJar) {
	archiveBaseName = 'spring-cglib-repack'
	archiveVersion = cglibVersion
	configurations = [project.configurations.cglib]
	relocate 'net.sf.cglib', 'org.springframework.cglib'
	relocate 'org.objectweb.asm', 'org.springframework.asm'
}

task objenesisRepackJar(type: ShadowJar) {
	archiveBaseName = 'spring-objenesis-repack'
	archiveVersion = objenesisVersion
	configurations = [project.configurations.objenesis]
	relocate 'org.objenesis', 'org.springframework.objenesis'
}

dependencies {
	cglib("cglib:cglib:${cglibVersion}@jar")
	objenesis("org.objenesis:objenesis:${objenesisVersion}@jar")
	coroutines(project(path: ":kotlin-coroutines", configuration: 'classesOnlyElements'))
	compile(files(cglibRepackJar))
	compile(files(objenesisRepackJar))
	compile(project(":spring-jcl"))
	compileOnly(project(":kotlin-coroutines"))
	compileOnly("io.projectreactor.tools:blockhound")
	optional("net.sf.jopt-simple:jopt-simple")
	optional("org.aspectj:aspectjweaver")
	optional("org.jetbrains.kotlin:kotlin-reflect")
	optional("org.jetbrains.kotlin:kotlin-stdlib")
	optional("io.projectreactor:reactor-core")
	optional("io.reactivex:rxjava")
	optional("io.reactivex:rxjava-reactive-streams")
	optional("io.reactivex.rxjava2:rxjava")
	optional("io.reactivex.rxjava3:rxjava")
	optional("io.netty:netty-buffer")
	testCompile("io.projectreactor:reactor-test")
	testCompile("javax.annotation:javax.annotation-api")
	testCompile("com.google.code.findbugs:jsr305")
	testCompile("org.xmlunit:xmlunit-assertj")
	testCompile("org.xmlunit:xmlunit-matchers")
	testCompile("javax.xml.bind:jaxb-api")
	testCompile("com.fasterxml.woodstox:woodstox-core")
	testCompile(project(":kotlin-coroutines"))
	testCompile("io.projectreactor.tools:blockhound")
	testFixturesImplementation("com.google.code.findbugs:jsr305")
	testFixturesImplementation("io.projectreactor:reactor-test")
	testFixturesImplementation("org.assertj:assertj-core")
	testFixturesImplementation("org.junit.platform:junit-platform-launcher")
	testFixturesImplementation("org.junit.jupiter:junit-jupiter-api")
	testFixturesImplementation("org.junit.jupiter:junit-jupiter-params")
	testFixturesImplementation("org.xmlunit:xmlunit-assertj")
}

jar {
	// Inline repackaged cglib classes directly into spring-core jar
	dependsOn cglibRepackJar
	from(zipTree(cglibRepackJar.archivePath)) {
		include "org/springframework/cglib/**"
		exclude "org/springframework/cglib/core/AbstractClassGenerator*.class"
		exclude "org/springframework/cglib/core/AsmApi*.class"
		exclude "org/springframework/cglib/core/KeyFactory.class"
		exclude "org/springframework/cglib/core/KeyFactory\$*.class"
		exclude "org/springframework/cglib/core/ReflectUtils*.class"
		exclude "org/springframework/cglib/proxy/Enhancer*.class"
		exclude "org/springframework/cglib/proxy/MethodProxy*.class"
	}

	dependsOn objenesisRepackJar
	from(zipTree(objenesisRepackJar.archivePath)) {
		include "org/springframework/objenesis/**"
	}

	from configurations.coroutines
}

test {
	// make sure the classes dir is used on the test classpath (required by ResourceTests)
	// When test fixtures are involved, the JAR is used by default
	classpath = sourceSets.main.output.classesDirs + classpath - files(jar.archiveFile)
}

FileCollection getTestClasspathForNativeImage() {
	return test.classpath.filter { !it.path.contains('kotlinx-coroutines-reactive') }
}

task createTestClasspathFile {
	doLast {
		project.file("${buildDir}/test_classpath.txt").write(getTestClasspathForNativeImage().join(':'))
	}
}

task createNativeImageConfigDir {
	mustRunAfter clean
	doLast {
		mkdir "${buildDir}/graalvm/META-INF/native-image"
	}
}

task testWithGraalVmAgent(type: JavaExec) {
	dependsOn test, createNativeImageConfigDir, createTestClasspathFile

	classpath = getTestClasspathForNativeImage()
	jvmArgs = [
		"-agentlib:native-image-agent=config-output-dir=${buildDir}/graalvm/META-INF/native-image",
		'-Dorg.graalvm.nativeimage.imagecode=agent'
	]
	main = 'org.junit.platform.console.ConsoleLauncher'
	args = [
		'--details=summary',
		'--exclude-tag="uses-blockhound | uses-kotlin-coroutines | uses-kotlin-reflection | uses-mockito | uses-mockk',
		'@./build/test_classes.txt'
	]
}

task buildNativeImageForTests(type: Exec) {
	dependsOn testWithGraalVmAgent

	def nativeImageExecutable = System.getenv('JAVA_HOME') + '/bin/native-image'
	def classpathEntries = getTestClasspathForNativeImage().collect { it.path } + "${buildDir}/graalvm"
	def classpath = classpathEntries.join(':')

	commandLine = [
		nativeImageExecutable,
		'--no-server',
		'--no-fallback',
		'--allow-incomplete-classpath',
		'--report-unsupported-elements-at-runtime',
		'--initialize-at-build-time=org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config,org.apache.logging.log4j.core.lookup,org.apache.logging.log4j.status,org.apache.logging.log4j.util,org.apache.logging.log4j.Level,org.apache.logging.log4j.core.util,org.apache.logging.log4j.message,org.apache.logging.log4j,org.apache.logging.log4j.MarkerManager\$Log4jMarker,org.apache.logging.log4j.core.impl,org.apache.logging.log4j.status,org.apache.logging.log4j.status.StatusLogger,org.apache.logging.log4j.spi.DefaultThreadContextMap,org.apache.logging.log4j.spi.ExtendedLogger,org.apache.logging.log4j.message.AbstractMessageFactory,org.apache.logging.log4j.core.selector.ClassLoaderContextSelector,org.apache.logging.log4j.core.config.LoggerConfig,org.apache.logging.log4j.simple.SimpleLogger,org.apache.logging.log4j.MarkerManager,org.apache.logging.log4j.message.ParameterizedNoReferenceMessageFactory',
		'--initialize-at-build-time=org.junit.platform.commons.util.StringUtils,org.junit.platform.commons.logging.LoggerFactory,org.junit.platform.commons.logging.LoggerFactory\$DelegatingLogger',
		'--initialize-at-build-time=org.springframework.core.type.AnnotationMetadataTests$SubclassEnum$1,org.springframework.core.type.AnnotationMetadataTests$SubclassEnum$2',
		'--initialize-at-run-time=org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor,org.apache.logging.log4j.core.async.AsyncLoggerContext,org.apache.logging.log4j.core.config.yaml.YamlConfiguration,org.apache.logging.log4j.core.pattern.JAnsiTextRenderer',
		'--initialize-at-run-time=org.apache.commons.logging.LogAdapter,org.apache.commons.logging.LogAdapter$Log4jLog',
		'-H:IncludeResourceBundles=com.sun.org.apache.xerces.internal.impl.msg.SAXMessages',
		'-H:+TraceClassInitialization',
		'-H:+ReportExceptionStackTraces',
		'-H:+AddAllCharsets',
		'-H:EnableURLProtocols=https',
		"-H:Name=${buildDir}/native-image-tests.bin",
		'-Dverbose=true',
		'-Dlog4j2.disable.jmx=true',
		'-cp', classpath,
		'org.junit.platform.console.ConsoleLauncher'
	]
}
