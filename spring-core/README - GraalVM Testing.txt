==========================================================================================
=== Quick Instructions
==========================================================================================

1. Download and install the Java 8 version of GraalVM CE along with the `native-image` tool.

2. Execute the following commands.

../gradlew --offline --no-build-cache -DnativeImageTesting=true clean :spring-core:testWithGraalVmAgent && time ./ni.sh && time ./runTestsInNativeImage.sh

==========================================================================================
=== Detailed Instructions
==========================================================================================

1. Download the Java 8 version of GraalVM.

   We are currently using the following version.

   https://github.com/graalvm/graalvm-ce-builds/releases/tag/vm-20.0.0

------------------------------------------------------------------------------------------

2. Unpack the archive and set the JAVA_HOME environment variable to point to it. Then
   modify the PATH environment variable to include JAVA_HOME/bin.

   For example, if you are developing on Mac OS and you unpacked the archive into
   /opt/graalvm/graalvm-ce-java8-20.0.0, the following commands should work.

   export GRAALVM_HOME=/opt/graalvm/graalvm-ce-java8-20.0.0/Contents/Home
   export PATH=$GRAALVM_HOME/bin:$PATH
   export JAVA_HOME=$GRAALVM_HOME
   
   Executing `java -version` should then display something similar to the following.

     openjdk version "1.8.0_242"
     OpenJDK Runtime Environment (build 1.8.0_242-b06)
     OpenJDK 64-Bit Server VM GraalVM CE 20.0.0 (build 25.242-b06-jvmci-20.0-b02, mixed mode)

------------------------------------------------------------------------------------------

3. Execute `gu install native-image` to download the native-image command.

   Executing `native-image --version` should then display something similar to the following.

     GraalVM Version 20.0.0 CE

------------------------------------------------------------------------------------------

4. Run the tests with the GraalVM JVM agent via the custom `testWithGraalVmAgent` Gradle
   task`, specifying `-DnativeImageTesting=true` in order to have test classes that use
   unsupported features filtered from the list of test classes. Note that
   `testWithGraalVmAgent` depends on the standard `test` task. To ensure that things
   work properly, you might want to first execute `../gradlew clean` and supply the
   `--no-build-cache` flag when executing the tests so that you are not working with cached
   results.

   ../gradlew -DnativeImageTesting=true :spring-core:testWithGraalVmAgent --offline --no-build-cache

   Open `build/reports/tests/test/index.html` to see the test results.

   Open `build/test_classes.txt` to see the list of test classes that will be executed
   within the native image. Note that TestClassTrackingTestExecutionListener is an
   automatically registered JUnit Platform TestExecutionListener that creates this file.
   This file will be used by later scripts to execute the filtered list of test classes.

   Open `build/test_classpath.txt` to see the classpath that will be used to compile the
   native image.

------------------------------------------------------------------------------------------

5. Execute `ni.sh` to compile a `native-image-tests.bin` executable in the `build` directory
   using the configuration generated by the GraalVM JVM agent in the `build/graalvm`
   directory combined with the hand-crafted configuration found in
   `src/test/resources/META-INF/native-image`.

------------------------------------------------------------------------------------------

6. Execute `runTestsInNativeImage.sh` to run the tests in the native image.

==========================================================================================
=== NOTES
==========================================================================================

AnnotatedElementUtilsTests:

- javaxAnnotationTypeViaFindMergedAnnotation() requires the following in proxy-config:
    ["javax.annotation.Resource", "org.springframework.core.annotation.SynthesizedAnnotation"]

------------------------------------------------------------------------------------------

DefaultConversionServiceTests:

- convertObjectToStringWithJavaTimeOfMethodPresent(): fails because the GraalVM agent does
	not detect that it needs to include superclasses in reflect-config.json when
	Class#getMethod is invoked (as in org.springframework.util.ClassUtils.getStaticMethod()).
	This may be a bug in the GraalVM agent. As a workaround, we have added an
	`allDeclaredMethods` entry to reflect-config.json for java.time.ZoneRegion so that the
	`of(String)` method defined in ZoneId (ZoneRegion's superclass) is visible via reflection.

- convertStringToTimezone(): fails because it uses java.util.TimeZone.getTimeZone(String)
	with a custom Zone ID which doesn't seem to be properly supported in a GraalVM native
	image (perhaps due to the use of sun.util.calendar.ZoneInfoFile.getCustomTimeZone()).
	Assertion failure: Expecting: <"GMT"> to be equal to: <"GMT+02:00"> but was not.
	We have circumvented this by aborting this test method when running in a native image.

------------------------------------------------------------------------------------------

Reflection:

- Member classes are not automatically registered for reflective access within a native
	image by the JVM agent. To enable this support, one must manually set `allPublicClasses`
	and `allDeclaredClasses` to `true` in `reflect-config.json`.
	
	From the GraalVM wiki:

	"However, allPublicClasses and allDeclaredClasses don't automatically register the
	inner classes for reflective access. They just make them available via Class.getClasses()
	and Class.getDeclaredClasses() when called on the declaring class."

	https://github.com/oracle/graal/blob/master/substratevm/REFLECTION.md#manual-configuration

    Entries have been manually added to `reflect-config.json` for the following:
	  - org.springframework.core.type.StandardAnnotationMetadataTests
      - org.springframework.core.type.StandardClassMetadataMemberClassTests

------------------------------------------------------------------------------------------
